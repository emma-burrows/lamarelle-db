using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using MySql.Data.MySqlClient;
using MySql.Data.Types;
using System.Web.UI.HtmlControls;


public partial class EditAnyTable : System.Web.UI.Page
{
  private int PREFIX_LENGTH = 2;

  private ElevesHelper eh;
  private ArrayList columns;
  private string userrole;
  private string tablename;
  private TextBox[] tbs;

  protected void Page_Load(object sender, EventArgs e)
  {
    HtmlGenericControl body = (HtmlGenericControl)Master.FindControl("master");
    body.Attributes.Add("class", "admin");

    tablename = HttpContext.Current.Request.QueryString["t"];
    userrole = LoginHelper.UserRole(Page.User.Identity.Name);

    if (userrole != "admin")
    {
      AllPanel.Visible = false;
      Label1.Text = "Vous n'avez pas la permission d'utiliser cette page. Veuillez contacter site@lamarelle.org.uk si vous pensez que c'est une erreur.";

    }
    else
    {

      eh = new ElevesHelper();
      columns = new ArrayList();

      if (tablename == "" | tablename == null)
      {
        Label1.Text = "Aucune table n'a été sélectionnée.";
      }
      else
      {
        litTableName.Text = tablename;
        tbs = PageHelper.CreateTextBoxes(PageHelper.ColumnNames(eh.GetContactsDataSet("SELECT * from " + tablename).Tables[0]));

        Table tbl = new Table();

        InputPanel.Controls.Add(tbl);

        int counter = 0;
        foreach (TextBox tb in tbs)
        {
          columns.Add(tb.ID.Substring(PREFIX_LENGTH));
          TableRow tr = new TableRow();
          TableCell td1 = new TableCell();
          TableCell td2 = new TableCell();

          tbl.Controls.Add(tr);
          tr.Controls.Add(td1);
          tr.Controls.Add(td2);

          Label lb = new Label();
          lb.Text = LoginHelper.GetColumnComment(tablename, tb.ID.Substring(PREFIX_LENGTH));

          td1.Controls.Add(lb);
          td2.Controls.Add(tb);
          counter++;
        }

        if (!IsPostBack)
        {
          if (Page.User.Identity.Name == "emma@astele.co.uk")
          {
            Label1.Text = "Super admin";
            GridView1.AutoGenerateEditButton = true;
            GridView1.AutoGenerateDeleteButton = true;
          }
          else
          {
            GridView1.AutoGenerateEditButton = false;
            GridView1.AutoGenerateDeleteButton = false;
          }
        
          BindDataGrid();
        }
      }
    }
  }


  private void BindDataGrid()
  {

    using (MySqlCommand cmd = ContactsSQLHelper.GetCommand("SELECT * FROM " + tablename))
    {
      //cmd.Connection.Open();
      GridView1.DataSource = cmd.ExecuteReader();
      GridView1.DataBind();
    }
  }

  protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
  {
    string insertSQL = "DELETE FROM " + tablename + " WHERE ID='" + GridView1.DataKeys[e.RowIndex].Value.ToString() + "'";

    int executed = 0;

    using (MySqlCommand cmd = ContactsSQLHelper.GetCommand(insertSQL))
    {
      //cmd.Connection.Open();
      executed = cmd.ExecuteNonQuery();
    }

    if (executed == 1)
    {
      Label1.Text = "Fiche supprimée avec succès";
      EmptyTextBoxes();
      BindDataGrid();
    }
    else
    {
      String message = "Une erreur est survenue. ID = '" + GridView1.Rows[e.RowIndex].Cells[1].Text + "' et Nombre = '" + GridView1.Rows[e.RowIndex].Cells[2].Text;
      Label1.Text = message;
    }
  }

  protected void Button2_Click(object sender, EventArgs e)
  {
    ElevesHelper eh = new ElevesHelper();

    int executed = eh.Insert(tablename, CreateDictionary());

    if (executed == 1)
    {
      Label1.Text = "Nouvelles infos enregistrées avec succès";
      EmptyTextBoxes();
      BindDataGrid();
    }
    else
    {
      String message = "Une erreur est survenue.";
      Label1.Text = message;
    }
  }



  private void EmptyTextBoxes()
  {
    foreach (TextBox tb in tbs)
    {
      tb.Text = "";
    }
  }

  private Dictionary<string, string> CreateDictionary()
  {
    Dictionary<string, string> values = new Dictionary<string, string>();

    foreach (TextBox tb in tbs)
    {
      values.Add(tb.ID.Substring(PREFIX_LENGTH), tb.Text);
    }

    return values;
  }



  protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)
  {
    // The index depends on the presence or not of the Edit + Delete column
    // 1 = when the edit column exists or 0 = when the edit column isn't enabled
    // Also relies on ID being the first column in the table, which is not great either
    // TODO: check if the edit buttons are enable
    if (e.Row.Cells.Count >= 1)
    {
      if (Page.User.Identity.Name != "emma@astele.co.uk" && GridView1.AutoGenerateEditButton == true)
      {
        e.Row.Cells[0].Visible = false;
      }
    }

  }
  protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
  {
    Label1.Text = "Updating...";

    //Get the datakey field of the current row
    int id = Int32.Parse(GridView1.DataKeys[e.RowIndex].Value.ToString());

    GridViewRow row = (GridViewRow)GridView1.Rows[e.RowIndex];

    Dictionary<string, string> values = new Dictionary<string, string>();

    int counter = -1; //compensate for the fact first cell is the Edit/Delete one
    foreach (TableCell cell in row.Cells)
    {
      foreach (Control control in cell.Controls)
      {
        if (control is TextBox)
        {
          TextBox tb = (TextBox)control;

          string colname = columns[counter].ToString();
          values.Add(colname, tb.Text);
        }
      }
      counter++;
    }
    
    eh.Update(tablename, id, values);

    GridView1.EditIndex = -1;
    BindDataGrid();

  }
  protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
  {
    GridView1.EditIndex = e.NewEditIndex;
    BindDataGrid();
  }

  protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
  {
    GridView1.EditIndex = -1;
    BindDataGrid();
  }
}
